import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { toast } from "sonner";
import { invoke } from "@tauri-apps/api/core";

const formSchema = z.object({
  file: z
    .any()
    .refine((file) => file?.length == 1, "File is required.")
    .refine(
      (file) => file[0]?.type === "application/json",
      "Must be a json file."
    )
    .refine((file) => file[0]?.size <= 3000000, `Max file size is 3MB.`),
});

export default function NewServerModal({
  open,
  setOpen,
}: {
  open: boolean;
  setOpen: (open: boolean) => void;
}) {
  const form = useForm<z.infer<typeof formSchema>>({
    defaultValues: {
      file: undefined,
    },
    resolver: zodResolver(formSchema),
  });
  const fileRef = form.register("file", { required: true });

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Import server</DialogTitle>
          <DialogDescription>
            To interact with a server, you need to generate a configuration per
            user. Configurations can be generated by running the `operate new`
            command on the server.
          </DialogDescription>
        </DialogHeader>

        <Form {...form}>
          <form
            onSubmit={form.handleSubmit((values) => {
              handleSubmit({ setOpen, values });
            })}
            className="space-y-8"
          >
            <FormField
              control={form.control}
              name="file"
              render={() => (
                <FormItem>
                  <FormLabel>Config File</FormLabel>
                  <FormControl>
                    <Input
                      type="file"
                      accept="application/json"
                      className="file:text-primary"
                      {...fileRef}
                    />
                  </FormControl>
                  <FormDescription>
                    The configuration file required to interact with the server.
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            <DialogFooter>
              <Button
                type="button"
                variant="outline"
                onClick={(_) => {
                  setOpen(false);
                }}
              >
                Cancel
              </Button>
              <Button type="submit">Add Server</Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}

async function handleSubmit({
  setOpen,
  values,
}: {
  setOpen: (open: boolean) => void;
  values: z.infer<typeof formSchema>;
}) {
  setOpen(false);
  const file = values.file[0] as File;
  const text = await file.text();

  let result = invoke("import_server", { fileName: file.name, config: text });

  toast.promise(result, {
    loading: "Loading...",
    success: (msg) => {
      return `${msg} was successfully aded`;
    },
    error: (msg) => {
      return msg;
    },
  });
}
